{"problem_statements": ["A list of 4 integers in the range [2, 30].", "The first integer is the mode of a binomial distribution with a mean of 11.", "The second integer is the variance of that distribution, which must be an integer.", "The second integer equals the expected frequency in a contingency table with a row total of 11 and column total equal to the second integer, using a total sample size of 11.", "The third integer equals the number of integer partitions of 7.", "The fourth integer equals twice the average of the first three integers.", "What are the four integers?"], "check_solution_function_str": "def check_solution(solution, **params):\n    if len(solution) != 4:\n        return False\n    a, b, c, d = solution\n    # Check first integer is mode of binomial with mean 11. The mode must be 11.\n    if a != 11:\n        return False\n    # Check second integer (b) is variance which must be an integer (already required as solution contains integers)\n    # Check if b is a valid variance for a binomial distribution with mean 11:\n    # Valid variances are 0 or 10 (since n must divide 121)\n    if b not in (0, 10):\n        return False\n    # Check third is number of partitions of 7 (15)\n    if c != 15:\n        return False\n    # Check fourth is twice the average of a, b, c\n    if 3*d != 2*(a + b + c):\n        return False\n    # Check if variance b is 10 (since when b=0, fourth would not be integer)\n    if b != 10:\n        return False\n    return True", "possible_solution": [11, 10, 15, 24]}
{"problem_statements": ["A list of 4 integers in the range [2, 30].", "The first integer is the mode of a binomial distribution where (n+1)p equals the second integer.", "The average of the distribution equals the second integer minus 1.", "The product of all four integers equals 37440.", "The third integer is either 10 or 22.", "The fourth integer equals eight times the multiset difference between the second and third integers.", "All integers are distinct."], "check_solution_function_str": "def check_solution(solution, **params):\n    if len(solution) != 4:\n        return False\n    a, b, c, d = solution\n    if len(set(solution)) != 4:\n        return False  # All distinct\n    if c not in {params['guiding_param_4'], params['guiding_param_5']}:\n        return False\n    if a != b - 1:\n        return False\n    if d != 8 * (b - c):\n        return False\n    if a * b * c * d != params['guiding_param_3']:\n        return False\n    return True", "possible_solution": [12, 13, 10, 24]}
